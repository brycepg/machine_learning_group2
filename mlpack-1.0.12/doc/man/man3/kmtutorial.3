.TH "kmtutorial" 3 "Sat Mar 14 2015" "Version 1.0.12" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kmtutorial \- K-Means tutorial (kmeans) 

.SH "Introduction"
.PP
The popular k-means algorithm for clustering has been around since the late 1950s, and the standard algorithm was proposed by Stuart Lloyd in 1957\&. Given a set of points $ X $, k-means clustering aims to partition each point $ x_i $ into a cluster $ c_j $ (where $ j \le k $ and $ k $, the number of clusters, is a parameter)\&. The partitioning is done to minimize the objective function
.PP
\[ \sum_{j = 1}^{k} \sum_{x_i \in c_j} \| x_i - \mu_j \|^2 \].PP
where $\mu_j$ is the centroid of cluster $c_j$\&. The standard algorithm is a two-step algorithm:
.PP
.IP "\(bu" 2
\fBAssignment\fP \fBstep\fP\&. Each point $x_i$ in $X$ is assigned to the cluster whose centroid it is closest to\&.
.IP "\(bu" 2
\fBUpdate\fP \fBstep\fP\&. Using the new cluster assignments, the centroids of each cluster are recalculated\&.
.PP
.PP
The algorithm has converged when no more assignment changes are happening with each iteration\&. However, this algorithm can get stuck in local minima of the objective function and is particularly sensitive to the initial cluster assignments\&. Also, situations can arise where the algorithm will never converge but reaches steady state -- for instance, one point may be changing between two cluster assignments\&.
.PP
There is vast literature on the k-means algorithm and its uses, as well as strategies for choosing initial points effectively and keeping the algorithm from converging in local minima\&. \fBmlpack\fP does implement some of these, notably the Bradley-Fayyad algorithm (see the reference below) for choosing refined initial points\&. Importantly, the C++ \fCKMeans\fP class makes it very easy to improve the k-means algorithm in a modular way\&.
.PP
.PP
.nf
@inproceedings{bradley1998refining,
  title={Refining initial points for k-means clustering},
  author={Bradley, Paul S\&. and Fayyad, Usama M\&.},
  booktitle={Proceedings of the Fifteenth International Conference on Machine
      Learning (ICML 1998)},
  volume={66},
  year={1998}
}
.fi
.PP
.PP
\fBmlpack\fP provides:
.PP
.IP "\(bu" 2
a \fBsimple command-line executable\fP to run k-means
.IP "\(bu" 2
a \fBsimple C++ interface\fP to run k-means
.IP "\(bu" 2
a \fBgeneric, extensible, and powerful C++ class\fP for complex usage
.PP
.SH "Table of Contents"
.PP
A list of all the sections this tutorial contains\&.
.PP
.IP "\(bu" 2
\fBIntroduction\fP
.IP "\(bu" 2
\fBTable of Contents\fP
.IP "\(bu" 2
\fBCommand-Line 'kmeans'\fP
.IP "  \(bu" 4
\fBSimple k-means clustering\fP
.IP "  \(bu" 4
\fBSaving the resulting centroids\fP
.IP "  \(bu" 4
\fBAllowing empty clusters\fP
.IP "  \(bu" 4
\fBLimiting the maximum number of iterations\fP
.IP "  \(bu" 4
\fBSetting the overclustering factor\fP
.IP "  \(bu" 4
\fBUsing Bradley-Fayyad 'refined start'\fP
.PP

.IP "\(bu" 2
\fBThe 'KMeans' class\fP
.IP "  \(bu" 4
\fBRunning k-means and getting cluster assignments\fP
.IP "  \(bu" 4
\fBRunning k-means and getting centroids of clusters\fP
.IP "  \(bu" 4
\fBLimiting the maximum number of iterations\fP
.IP "  \(bu" 4
\fBSetting the overclustering factor\fP
.IP "  \(bu" 4
\fBSetting initial cluster assignments\fP
.IP "  \(bu" 4
\fBSetting initial cluster centroids\fP
.IP "  \(bu" 4
\fBRunning sparse k-means\fP
.PP

.IP "\(bu" 2
\fBTemplate parameters for the 'KMeans' class\fP
.IP "  \(bu" 4
\fBChanging the distance metric used for k-means\fP
.IP "  \(bu" 4
\fBChanging the initial partitioning strategy used for k-means\fP
.IP "  \(bu" 4
\fBChanging the action taken when an empty cluster is encountered\fP
.PP

.IP "\(bu" 2
\fBFurther documentation\fP
.PP
.SH "Command-Line 'kmeans'"
.PP
\fBmlpack\fP provides a command-line executable, \fCkmeans\fP, to allow easy execution of the k-means algorithm on data\&. Complete documentation of the executable can be found by typing
.PP
.PP
.nf
$ kmeans --help
.fi
.PP
.PP
Below are several examples demonstrating simple use of the \fCkmeans\fP executable\&.
.SS "Simple k-means clustering"
We want to find 5 clusters using the points in the file dataset\&.csv\&. By default, if any of the clusters end up empty, that cluster will be reinitialized to contain the point furthest from the cluster with maximum variance\&. The cluster assignments of each point will be stored in assignments\&.csv\&. Each row in assignments\&.csv will correspond to the row in dataset\&.csv\&.
.PP
.PP
.nf
$ kmeans -c 5 -i dataset\&.csv -v -o assignments\&.csv
.fi
.PP
.SS "Saving the resulting centroids"
Sometimes it is useful to save the centroids of the clusters found by k-means; one example might be for plotting the points\&. The \fC-C\fP (\fC--centroid_file\fP) option allows specification of a file into which the centroids will be saved (one centroid per line, if it is a CSV or other text format)\&.
.PP
.PP
.nf
$ kmeans -c 5 -i dataset\&.csv -v -o assignments\&.csv -C centroids\&.csv
.fi
.PP
.SS "Allowing empty clusters"
If you would like to allow empty clusters to exist, instead of reinitializing them, simply specify the \fC-e\fP (\fC--allow_empty_clusters\fP) option\&. Note that when you save your clusters, some of the clusters may be filled with NaNs\&. This is expected behavior -- if a cluster has no points, the concept of a centroid makes no sense\&.
.PP
.PP
.nf
$ kmeans -c 5 -i dataset\&.csv -v -o assignments\&.csv -C centroids\&.csv
.fi
.PP
.SS "Limiting the maximum number of iterations"
As mentioned earlier, the k-means algorithm can often fail to converge\&. In such a situation, it may be useful to stop the algorithm by way of limiting the maximum number of iterations\&. This can be done with the \fC-m\fP (\fC--max_iterations\fP) parameter, which is set to 1000 by default\&. If the maximum number of iterations is 0, the algorithm will run until convergence -- or potentially forever\&. The example below sets a maximum of 250 iterations\&.
.PP
.PP
.nf
$ kmeans -c 5 -i dataset\&.csv -v -o assignments\&.csv -m 250
.fi
.PP
.SS "Setting the overclustering factor"
The \fBmlpack\fP k-means implementation allows 'overclustering', which is when the k-means algorithm is run with more than the requested number of clusters\&. Upon convergence, the clusters with the nearest centroids are merged until only the requested number of centroids remain\&. This can provide better clustering results\&. The overclustering factor, specified with \fC-O\fP or \fC--overclustering\fP, determines how many more clusters are found than were requested\&. For instance, with \fCk\fP set to 5 and an overclustering factor of 2, 10 clusters will be found\&. Note that the overclustering factor does not need to be an integer\&.
.PP
The following code snippet finds 5 clusters, but with an overclustering factor of 2\&.4 (so 12 clusters are found and then merged together to produce 5 final clusters)\&.
.PP
.PP
.nf
$ kmeans -c 5 -O 2\&.4 -i dataset\&.csv -v -o assignments\&.csv
.fi
.PP
.SS "Using Bradley-Fayyad 'refined start'"
The method proposed by Bradley and Fayyad in their paper 'Refining initial
points for k-means clustering' is implemented in \fBmlpack\fP\&. This strategy samples points from the dataset and runs k-means clustering on those points multiple times, saving the resulting clusters\&. Then, k-means clustering is run on those clusters, yielding the original number of clusters\&. The centroids of those resulting clusters are used as initial centroids for k-means clustering on the entire dataset\&.
.PP
This technique generally gives better initial points than the default random partitioning, but depending on the parameters, it can take much longer\&. This initialization technique is enabled with the \fC-r\fP (\fC--refined_start\fP) option\&. The \fC-S\fP (\fC--samplings\fP) parameter controls how many samplings of the dataset are performed, and the \fC-p\fP (\fC--percentage\fP) parameter controls how much of the dataset is randomly sampled for each sampling (it must be between 0\&.0 and 1\&.0)\&. For more information on the refined start technique, see the paper referenced in the introduction of this tutorial\&.
.PP
The example below performs k-means clustering, giving 5 clusters, using the refined start technique, sampling 10% of the dataset 25 times to produce the initial centroids\&.
.PP
.PP
.nf
$ kmeans -c 5 -i dataset\&.csv -v -o assignments\&.csv -r -S 25 -p 0\&.2
.fi
.PP
.SH "The 'KMeans' class"
.PP
The \fCKMeans<>\fP class (with default template parameters) provides a simple way to run k-means clustering using \fBmlpack\fP in C++\&. The default template parameters for \fCKMeans<>\fP will initialize cluster assignments randomly and disallow empty clusters\&. When an empty cluster is encountered, the point furthest from the cluster with maximum variance is set to the centroid of the empty cluster\&.
.SS "Running k-means and getting cluster assignments"
The simplest way to use the \fCKMeans<>\fP class is to pass in a dataset and a number of clusters, and receive the cluster assignments in return\&. Note that the dataset must be column-major -- that is, one column corresponds to one point\&. See \fBthe matrices guide\fP for more information\&.
.PP
.PP
.nf
#include <mlpack/methods/kmeans/kmeans\&.hpp>

using namespace mlpack::kmeans;

// The dataset we are clustering\&.
extern arma::mat data;
// The number of clusters we are getting\&.
extern size_t clusters;

// The assignments will be stored in this vector\&.
arma::Col<size_t> assignments;

// Initialize with the default arguments\&.
KMeans<> k;
k\&.Cluster(data, clusters, assignments);
.fi
.PP
.PP
Now, the vector \fCassignments\fP holds the cluster assignments of each point in the dataset\&.
.SS "Running k-means and getting centroids of clusters"
Often it is useful to not only have the cluster assignments, but the centroids of each cluster\&. Another overload of \fCCluster()\fP makes this easily possible:
.PP
.PP
.nf
#include <mlpack/methods/kmeans/kmeans\&.hpp>

using namespace mlpack::kmeans;

// The dataset we are clustering\&.
extern arma::mat data;
// The number of clusters we are getting\&.
extern size_t clusters;

// The assignments will be stored in this vector\&.
arma::Col<size_t> assignments;
// The centroids will be stored in this matrix\&.
arma::mat centroids;

// Initialize with the default arguments\&.
KMeans<> k;
k\&.Cluster(data, clusters, assignments, centroids);
.fi
.PP
.PP
Note that the centroids matrix has columns equal to the number of clusters and rows equal to the dimensionality of the dataset\&. Each column represents the centroid of the according cluster -- \fCcentroids\&.col(0)\fP represents the centroid of the first cluster\&.
.SS "Limiting the maximum number of iterations"
The first argument to the constructor allows specification of the maximum number of iterations\&. This is useful because often, the k-means algorithm does not converge, and is terminated after a number of iterations\&. Setting this parameter to 0 indicates that the algorithm will run until convergence -- note that in some cases, convergence may never happen\&. The default maximum number of iterations is 1000\&.
.PP
.PP
.nf
// The first argument is the maximum number of iterations\&.  Here we set it to
// 500 iterations\&.
KMeans<> k(500);
.fi
.PP
.PP
Then you can run \fCCluster()\fP as normal\&.
.SS "Setting the overclustering factor"
For a description of what overclustering is, see \fBthe command-line interface tutorial about overclustering\fP\&.
.PP
The overclustering factor, which by default is 1\&.0 (this indicates that no overclustering is happening), is specified in the second argument to the constructor\&.
.PP
.PP
.nf
// We will keep the default maximum iterations of 1000, but set the
// overclustering factor to 2\&.5\&.
KMeans<> k(1000, 2\&.5);
.fi
.PP
.PP
Then you can run \fCCluster()\fP as normal\&.
.SS "Setting initial cluster assignments"
If you have an initial guess for the cluster assignments for each point, you can fill the assignments vector with the guess and then pass an extra boolean (initialAssignmentGuess) as true to the \fCCluster()\fP method\&. Below are examples for either overload of \fCCluster()\fP\&.
.PP
.PP
.nf
#include <mlpack/methods/kmeans/kmeans\&.hpp>

using namespace mlpack::kmeans;

// The dataset we are clustering on\&.
extern arma::mat dataset;
// The number of clusters we are obtaining\&.
extern size_t clusters;

// A vector pre-filled with initial assignment guesses\&.
extern arma::Col<size_t> assignments;

KMeans<> k;

// The boolean set to true indicates that our assignments vector is filled with
// initial guesses\&.
k\&.Cluster(dataset, clusters, assignments, true);
.fi
.PP
.PP
.PP
.nf
#include <mlpack/methods/kmeans/kmeans\&.hpp>

using namespace mlpack::kmeans;

// The dataset we are clustering on\&.
extern arma::mat dataset;
// The number of clusters we are obtaining\&.
extern size_t clusters;

// A vector pre-filled with initial assignment guesses\&.
extern arma::Col<size_t> assignments;

// This will hold the centroids of the finished clusters\&.
arma::mat centroids;

KMeans<> k;

// The boolean set to true indicates that our assignments vector is filled with
// initial guesses\&.
k\&.Cluster(dataset, clusters, assignments, centroids, true);
.fi
.PP
.PP
\fBNote:\fP
.RS 4
If you have a heuristic or algorithm which makes initial guesses, a more elegant solution is to create a new class fulfilling the InitialPartitionPolicy template policy\&. See \fBthe section about changing the initial partitioning strategy\fP for more details\&.
.RE
.PP
\fB\fP
.RS 4
.RE
.PP
\fBNote:\fP
.RS 4
If you set the InitialPartitionPolicy parameter to something other than the default but give an initial cluster assignment guess, the InitialPartitionPolicy will not be used to initialize the algorithm\&. See \fBthe section about changing the initial partitioning strategy\fP for more details\&.
.RE
.PP
.SS "Setting initial cluster centroids"
An equally important option to being able to make initial cluster assignment guesses is to make initial cluster centroid guesses without having to assign each point in the dataset to an initial cluster\&. This is similar to the previous section, but now you must pass two extra booleans -- the first (initialAssignmentGuess) as false, indicating that there are not initial cluster assignment guesses, and the second (initialCentroidGuess) as true, indicating that the centroids matrix is filled with initial centroid guesses\&.
.PP
This, of course, only works with the overload of \fCCluster()\fP that takes a matrix to put the resulting centroids in\&. Below is an example\&.
.PP
.PP
.nf
#include <mlpack/methods/kmeans/kmeans\&.hpp>

using namespace mlpack::kmeans;

// The dataset we are clustering on\&.
extern arma::mat dataset;
// The number of clusters we are obtaining\&.
extern size_t clusters;

// A matrix pre-filled with guesses for the initial cluster centroids\&.
extern arma::mat centroids;

// This will be filled with the final cluster assignments for each point\&.
arma::Col<size_t> assignments;

KMeans<> k;

// Remember, the first boolean indicates that we are not giving initial
// assignment guesses, and the second boolean indicates that we are giving
// initial centroid guesses\&.
k\&.Cluster(dataset, clusters, assignments, centroids, false, true);
.fi
.PP
.PP
\fBNote:\fP
.RS 4
If you have a heuristic or algorithm which makes initial guesses, a more elegant solution is to create a new class fulfilling the InitialPartitionPolicy template policy\&. See \fBthe section about changing the initial partitioning strategy\fP for more details\&.
.RE
.PP
\fB\fP
.RS 4
.RE
.PP
\fBNote:\fP
.RS 4
If you set the InitialPartitionPolicy parameter to something other than the default but give an initial cluster centroid guess, the InitialPartitionPolicy will not be used to initialize the algorithm\&. See \fBthe section about changing the initial partitioning strategy\fP for more details\&.
.RE
.PP
.SS "Running sparse k-means"
The \fCCluster()\fP function can work on both sparse and dense matrices, so all of the above examples can be used with sparse matrices instead\&. Below is a simple example\&. Note that the centroids are returned as a sparse matrix also\&.
.PP
.PP
.nf
// The sparse dataset\&.
extern arma::sp_mat sparseDataset;
// The number of clusters\&.
extern size_t clusters;

// The assignments will be stored in this vector\&.
arma::Col<size_t> assignments;
// The centroids of each cluster will be stored in this sparse matrix\&.
arma::sp_mat sparseCentroids;

// No template parameter modification is necessary\&.
KMeans<> k;
k\&.Cluster(sparseDataset, clusters, assignments, sparseCentroids);
.fi
.PP
.SH "Template parameters for the 'KMeans' class"
.PP
The \fCKMeans<>\fP class also takes three template parameters, which can be modified to change the behavior of the k-means algorithm\&. There are three template parameters:
.PP
.IP "\(bu" 2
\fCMetricType:\fP controls the distance metric used for clustering (by default, the squared Euclidean distance is used)
.IP "\(bu" 2
\fCInitialPartitionPolicy:\fP the method by which initial clusters are set; by default, \fBRandomPartition\fP is used
.IP "\(bu" 2
\fCEmptyClusterPolicy:\fP the action taken when an empty cluster is encountered; by default, \fBMaxVarianceNewCluster\fP is used
.PP
.PP
The class is defined like below:
.PP
.PP
.nf
template<
  typename DistanceMetric = mlpack::metric::SquaredEuclideanDistance,
  typename InitialPartitionPolicy = RandomPartition,
  typename EmptyClusterPolicy = MaxVarianceNewCluster
>
class KMeans;
.fi
.PP
.PP
In the following sections, each policy is described further, with examples of how to modify them\&.
.SS "Changing the distance metric used for k-means"
Most machine learning algorithms in \fBmlpack\fP support modifying the distance metric, and \fCKMeans<>\fP is no exception\&. Similar to \fBNeighborSearch\fP (see \fBthe section in the NeighborSearch tutorial\fP), any class in \fBmlpack::metric\fP can be given as an argument\&. The \fBmlpack::metric::LMetric\fP class is a good example implementation\&.
.PP
A class fulfilling the MetricType policy must provide the following two functions:
.PP
.PP
.nf
// Empty constructor is required\&.
MetricType();

// Computer the distance between two points\&.
template<typename VecType>
double Evaluate(const VecType& a, const VecType& b);
.fi
.PP
.PP
Most of the standard metrics that could be used are stateless and therefore the \fCEvaluate()\fP method is implemented statically\&. However, there are metrics, such as the Mahalanobis distance (\fBmlpack::metric::MahalanobisDistance\fP), that store state\&. To this end, an instantiated MetricType object is stored within the \fCKMeans\fP class\&. The example below shows how to pass an instantiated MahalanobisDistance in the constructor\&.
.PP
.PP
.nf
// The initialized Mahalanobis distance\&.
extern mlpack::metric::MahalanobisDistance distance;

// We keep the default arguments for the maximum number of iterations and
// overclustering factor, but pass our instantiated metric\&.
KMeans<mlpack::metric::MahalanobisDistance> k(1000, 1\&.0, distance);
.fi
.PP
.PP
\fBNote:\fP
.RS 4
While the MetricType policy only requires two methods, one of which is an empty constructor, more can always be added\&. \fBmlpack::metric::MahalanobisDistance\fP also has constructors with parameters, because it is a stateful metric\&.
.RE
.PP
.SS "Changing the initial partitioning strategy used for k-means"
There have been many initial cluster strategies for k-means proposed in the literature\&. Fortunately, the \fCKMeans<>\fP class makes it very easy to implement one of these methods and plug it in without needing to modify the existing algorithm code at all\&.
.PP
By default, the \fCKMeans<>\fP class uses \fBmlpack::kmeans::RandomPartition\fP, which randomly partitions points into clusters\&. However, writing a new policy is simple; it needs to only implement the following functions:
.PP
.PP
.nf
// Empty constructor is required\&.
InitialPartitionPolicy();

// This function is called to initialize the clusters\&.
template<typename MatType>
void Cluster(MatType& data,
             const size_t clusters,
             arma::Col<size_t> assignments);
.fi
.PP
.PP
The templatization of the \fCCluster()\fP function allows both dense and sparse matrices to be passed in\&. If the desired policy does not work with sparse (or dense) matrices, then the method can be written specifically for one type of matrix -- however, be warned that if you try to use \fCKMeans\fP with that policy and the wrong type of matrix, you will get many ugly compilation errors!
.PP
.PP
.nf
// The Cluster() function specialized for dense matrices\&.
void Cluster(arma::mat& data,
             const size_t clusters,
             arma::Col<size_t> assignments);
.fi
.PP
.PP
One alternate to the default RandomPartition policy is the RefinedStart policy, which is an implementation of the Bradley and Fayyad approach for finding initial points detailed in 'Refined initial points for k-means clustering' and other places in this document\&. Also see the documentation for \fBmlpack::kmeans::RefinedStart\fP for more information\&.
.PP
The \fCCluster()\fP method must return valid initial assignments for every point in the dataset\&.
.PP
As with the MetricType template parameter, an initialized InitialPartitionPolicy can be passed to the constructor of \fCKMeans\fP as a fourth argument\&.
.SS "Changing the action taken when an empty cluster is encountered"
Sometimes, during clustering, a situation will arise where a cluster has no points in it\&. The \fCKMeans\fP class allows easy customization of the action to be taken when this occurs\&. By default, the point furthest from the centroid of the cluster with maximum variance is taken as the centroid of the empty cluster; this is implemented in the \fBmlpack::kmeans::MaxVarianceNewCluster\fP class\&. Another alternate choice is the \fBmlpack::kmeans::AllowEmptyClusters\fP class, which simply allows empty clusters to persist\&.
.PP
A custom policy can be written and it must implement the following methods:
.PP
.PP
.nf
// Empty constructor is required\&.
EmptyClusterPolicy();

// This function is called when an empty cluster is encountered\&.  emptyCluster
// indicates the cluster which is empty, and then the clusterCounts and
// assignments are meant to be modified by the function\&.  The function should
// return the number of modified points\&.
template<typename MatType>
size_t EmptyCluster(const MatType& data,
                    const size_t emptyCluster,
                    const MatType& centroids,
                    arma::Col<size_t>& clusterCounts,
                    arma::Col<size_t>& assignments);
.fi
.PP
.PP
The \fCEmptyCluster()\fP function is called for each cluster that is empty at each iteration of the algorithm\&. As with InitialPartitionPolicy, the \fCEmptyCluster()\fP function does not need to be generalized to support both dense and sparse matrices -- but usage with the wrong type of matrix will cause compilation errors\&.
.PP
Like the other template parameters to \fCKMeans\fP, EmptyClusterPolicy implementations that have state can be passed to the constructor of \fCKMeans\fP as a fifth argument\&. See the kmeans::KMeans documentation for further details\&.
.SH "Further documentation"
.PP
For further documentation on the KMeans class, consult the \fBcomplete API documentation\fP\&. 
