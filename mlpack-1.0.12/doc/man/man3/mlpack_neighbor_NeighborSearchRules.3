.TH "mlpack::neighbor::NeighborSearchRules< SortPolicy, MetricType, TreeType >" 3 "Sat Mar 14 2015" "Version 1.0.12" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::neighbor::NeighborSearchRules< SortPolicy, MetricType, TreeType > \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef 
.br
\fBNeighborSearchTraversalInfo\fP
.br
< TreeType > \fBTraversalInfoType\fP"
.br
.RI "\fIConvenience typedef\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNeighborSearchRules\fP (const typename TreeType::Mat &\fBreferenceSet\fP, const typename TreeType::Mat &\fBquerySet\fP, arma::Mat< size_t > &\fBneighbors\fP, arma::mat &\fBdistances\fP, MetricType &\fBmetric\fP)"
.br
.ti -1c
.RI "double \fBBaseCase\fP (const size_t queryIndex, const size_t referenceIndex)"
.br
.RI "\fIGet the distance from the query point to the reference point\&. \fP"
.ti -1c
.RI "size_t \fBBaseCases\fP () const "
.br
.RI "\fIGet the number of base cases that have been performed\&. \fP"
.ti -1c
.RI "size_t & \fBBaseCases\fP ()"
.br
.RI "\fIModify the number of base cases that have been performed\&. \fP"
.ti -1c
.RI "double \fBRescore\fP (const size_t queryIndex, TreeType &referenceNode, const double oldScore) const "
.br
.RI "\fIRe-evaluate the score for recursion order\&. \fP"
.ti -1c
.RI "double \fBRescore\fP (TreeType &queryNode, TreeType &referenceNode, const double oldScore) const "
.br
.RI "\fIRe-evaluate the score for recursion order\&. \fP"
.ti -1c
.RI "double \fBScore\fP (const size_t queryIndex, TreeType &referenceNode)"
.br
.RI "\fIGet the score for recursion order\&. \fP"
.ti -1c
.RI "double \fBScore\fP (TreeType &queryNode, TreeType &referenceNode)"
.br
.RI "\fIGet the score for recursion order\&. \fP"
.ti -1c
.RI "size_t \fBScores\fP () const "
.br
.RI "\fIGet the number of scores that have been performed\&. \fP"
.ti -1c
.RI "size_t & \fBScores\fP ()"
.br
.RI "\fIModify the number of scores that have been performed\&. \fP"
.ti -1c
.RI "const \fBTraversalInfoType\fP & \fBTraversalInfo\fP () const "
.br
.RI "\fIGet the traversal info\&. \fP"
.ti -1c
.RI "\fBTraversalInfoType\fP & \fBTraversalInfo\fP ()"
.br
.RI "\fIModify the traversal info\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "double \fBCalculateBound\fP (TreeType &queryNode) const "
.br
.RI "\fIRecalculate the bound for a given query node\&. \fP"
.ti -1c
.RI "void \fBInsertNeighbor\fP (const size_t queryIndex, const size_t pos, const size_t neighbor, const double distance)"
.br
.RI "\fIInsert a point into the neighbors and distances matrices; this is a helper function\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "size_t \fBbaseCases\fP"
.br
.RI "\fIThe number of base cases that have been performed\&. \fP"
.ti -1c
.RI "arma::mat & \fBdistances\fP"
.br
.RI "\fIThe matrix the resultant neighbor distances should be stored in\&. \fP"
.ti -1c
.RI "double \fBlastBaseCase\fP"
.br
.RI "\fIThe last base case result\&. \fP"
.ti -1c
.RI "size_t \fBlastQueryIndex\fP"
.br
.RI "\fIThe last query point \fBBaseCase()\fP was called with\&. \fP"
.ti -1c
.RI "size_t \fBlastReferenceIndex\fP"
.br
.RI "\fIThe last reference point \fBBaseCase()\fP was called with\&. \fP"
.ti -1c
.RI "MetricType & \fBmetric\fP"
.br
.RI "\fIThe instantiated metric\&. \fP"
.ti -1c
.RI "arma::Mat< size_t > & \fBneighbors\fP"
.br
.RI "\fIThe matrix the resultant neighbor indices should be stored in\&. \fP"
.ti -1c
.RI "const TreeType::Mat & \fBquerySet\fP"
.br
.RI "\fIThe query set\&. \fP"
.ti -1c
.RI "const TreeType::Mat & \fBreferenceSet\fP"
.br
.RI "\fIThe reference set\&. \fP"
.ti -1c
.RI "size_t \fBscores\fP"
.br
.RI "\fIThe number of scores that have been performed\&. \fP"
.ti -1c
.RI "\fBTraversalInfoType\fP \fBtraversalInfo\fP"
.br
.RI "\fITraversal info for the parent combination; this is updated by the traversal before each call to \fBScore()\fP\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename SortPolicy, typename MetricType, typename TreeType>class mlpack::neighbor::NeighborSearchRules< SortPolicy, MetricType, TreeType >"

.PP
Definition at line 24 of file neighbor_search_rules\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > typedef \fBNeighborSearchTraversalInfo\fP<TreeType> \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::\fBTraversalInfoType\fP"

.PP
Convenience typedef\&. 
.PP
Definition at line 103 of file neighbor_search_rules\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::\fBNeighborSearchRules\fP (const typename TreeType::Mat &referenceSet, const typename TreeType::Mat &querySet, arma::Mat< size_t > &neighbors, arma::mat &distances, MetricType &metric)"

.SH "Member Function Documentation"
.PP 
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::BaseCase (const size_tqueryIndex, const size_treferenceIndex)"

.PP
Get the distance from the query point to the reference point\&. This will update the 'neighbor' matrix with the new point if appropriate and will track the number of base cases (number of points evaluated)\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of query point\&. 
.br
\fIreferenceIndex\fP Index of reference point\&. 
.RE
.PP

.SS "template<typename SortPolicy , typename MetricType , typename TreeType > size_t \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::BaseCases () const\fC [inline]\fP"

.PP
Get the number of base cases that have been performed\&. 
.PP
Definition at line 93 of file neighbor_search_rules\&.hpp\&.
.PP
References mlpack::neighbor::NeighborSearchRules< SortPolicy, MetricType, TreeType >::baseCases\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > size_t& \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::BaseCases ()\fC [inline]\fP"

.PP
Modify the number of base cases that have been performed\&. 
.PP
Definition at line 95 of file neighbor_search_rules\&.hpp\&.
.PP
References mlpack::neighbor::NeighborSearchRules< SortPolicy, MetricType, TreeType >::baseCases\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::CalculateBound (TreeType &queryNode) const\fC [private]\fP"

.PP
Recalculate the bound for a given query node\&. 
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > void \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::InsertNeighbor (const size_tqueryIndex, const size_tpos, const size_tneighbor, const doubledistance)\fC [private]\fP"

.PP
Insert a point into the neighbors and distances matrices; this is a helper function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of point whose neighbors we are inserting into\&. 
.br
\fIpos\fP Position in list to insert into\&. 
.br
\fIneighbor\fP Index of reference point which is being inserted\&. 
.br
\fIdistance\fP Distance from query point to reference point\&. 
.RE
.PP

.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::Rescore (const size_tqueryIndex, TreeType &referenceNode, const doubleoldScore) const"

.PP
Re-evaluate the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&. This is used when the score has already been calculated, but another recursion may have modified the bounds for pruning\&. So the old score is checked against the new pruning bound\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of query point\&. 
.br
\fIreferenceNode\fP Candidate node to be recursed into\&. 
.br
\fIoldScore\fP Old score produced by \fBScore()\fP (or \fBRescore()\fP)\&. 
.RE
.PP

.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::Rescore (TreeType &queryNode, TreeType &referenceNode, const doubleoldScore) const"

.PP
Re-evaluate the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&. This is used when the score has already been calculated, but another recursion may have modified the bounds for pruning\&. So the old score is checked against the new pruning bound\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryNode\fP Candidate query node to recurse into\&. 
.br
\fIreferenceNode\fP Candidate reference node to recurse into\&. 
.br
\fIoldScore\fP Old score produced by Socre() (or \fBRescore()\fP)\&. 
.RE
.PP

.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::Score (const size_tqueryIndex, TreeType &referenceNode)"

.PP
Get the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of query point\&. 
.br
\fIreferenceNode\fP Candidate node to be recursed into\&. 
.RE
.PP

.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::Score (TreeType &queryNode, TreeType &referenceNode)"

.PP
Get the score for recursion order\&. A low score indicates priority for recursionm while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryNode\fP Candidate query node to recurse into\&. 
.br
\fIreferenceNode\fP Candidate reference node to recurse into\&. 
.RE
.PP

.SS "template<typename SortPolicy , typename MetricType , typename TreeType > size_t \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::Scores () const\fC [inline]\fP"

.PP
Get the number of scores that have been performed\&. 
.PP
Definition at line 98 of file neighbor_search_rules\&.hpp\&.
.PP
References mlpack::neighbor::NeighborSearchRules< SortPolicy, MetricType, TreeType >::scores\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > size_t& \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::Scores ()\fC [inline]\fP"

.PP
Modify the number of scores that have been performed\&. 
.PP
Definition at line 100 of file neighbor_search_rules\&.hpp\&.
.PP
References mlpack::neighbor::NeighborSearchRules< SortPolicy, MetricType, TreeType >::scores\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > const \fBTraversalInfoType\fP& \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::\fBTraversalInfo\fP () const\fC [inline]\fP"

.PP
Get the traversal info\&. 
.PP
Definition at line 106 of file neighbor_search_rules\&.hpp\&.
.PP
References mlpack::neighbor::NeighborSearchRules< SortPolicy, MetricType, TreeType >::traversalInfo\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > \fBTraversalInfoType\fP& \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::\fBTraversalInfo\fP ()\fC [inline]\fP"

.PP
Modify the traversal info\&. 
.PP
Definition at line 108 of file neighbor_search_rules\&.hpp\&.
.PP
References mlpack::neighbor::NeighborSearchRules< SortPolicy, MetricType, TreeType >::traversalInfo\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > size_t \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::baseCases\fC [private]\fP"

.PP
The number of base cases that have been performed\&. 
.PP
Definition at line 134 of file neighbor_search_rules\&.hpp\&.
.PP
Referenced by mlpack::neighbor::NeighborSearchRules< SortPolicy, MetricType, TreeType >::BaseCases()\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > arma::mat& \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::distances\fC [private]\fP"

.PP
The matrix the resultant neighbor distances should be stored in\&. 
.PP
Definition at line 121 of file neighbor_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > double \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::lastBaseCase\fC [private]\fP"

.PP
The last base case result\&. 
.PP
Definition at line 131 of file neighbor_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > size_t \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::lastQueryIndex\fC [private]\fP"

.PP
The last query point \fBBaseCase()\fP was called with\&. 
.PP
Definition at line 127 of file neighbor_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > size_t \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::lastReferenceIndex\fC [private]\fP"

.PP
The last reference point \fBBaseCase()\fP was called with\&. 
.PP
Definition at line 129 of file neighbor_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > MetricType& \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::metric\fC [private]\fP"

.PP
The instantiated metric\&. 
.PP
Definition at line 124 of file neighbor_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > arma::Mat<size_t>& \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::neighbors\fC [private]\fP"

.PP
The matrix the resultant neighbor indices should be stored in\&. 
.PP
Definition at line 118 of file neighbor_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > const TreeType::Mat& \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::querySet\fC [private]\fP"

.PP
The query set\&. 
.PP
Definition at line 115 of file neighbor_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > const TreeType::Mat& \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::referenceSet\fC [private]\fP"

.PP
The reference set\&. 
.PP
Definition at line 112 of file neighbor_search_rules\&.hpp\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > size_t \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::scores\fC [private]\fP"

.PP
The number of scores that have been performed\&. 
.PP
Definition at line 136 of file neighbor_search_rules\&.hpp\&.
.PP
Referenced by mlpack::neighbor::NeighborSearchRules< SortPolicy, MetricType, TreeType >::Scores()\&.
.SS "template<typename SortPolicy , typename MetricType , typename TreeType > \fBTraversalInfoType\fP \fBmlpack::neighbor::NeighborSearchRules\fP< SortPolicy, MetricType, TreeType >::traversalInfo\fC [private]\fP"

.PP
Traversal info for the parent combination; this is updated by the traversal before each call to \fBScore()\fP\&. 
.PP
Definition at line 140 of file neighbor_search_rules\&.hpp\&.
.PP
Referenced by mlpack::neighbor::NeighborSearchRules< SortPolicy, MetricType, TreeType >::TraversalInfo()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
