.TH "mlpack::det" 3 "Sat Mar 14 2015" "Version 1.0.12" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::det \- 
.PP
Density Estimation Trees\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBDTree\fP"
.br
.RI "\fIA density estimation tree is similar to both a decision tree and a space partitioning tree (like a kd-tree)\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBPrintLeafMembership\fP (\fBDTree\fP *dtree, const arma::mat &data, const arma::Mat< size_t > &labels, const size_t numClasses, const std::string leafClassMembershipFile='')"
.br
.RI "\fIPrint the membership of leaves of a density estimation tree given the labels and number of classes\&. \fP"
.ti -1c
.RI "void \fBPrintVariableImportance\fP (const \fBDTree\fP *dtree, const std::string viFile='')"
.br
.RI "\fIPrint the variable importance of each dimension of a density estimation tree\&. \fP"
.ti -1c
.RI "\fBDTree\fP * \fBTrainer\fP (arma::mat &dataset, const size_t folds, const bool useVolumeReg=false, const size_t maxLeafSize=10, const size_t minLeafSize=5, const std::string unprunedTreeOutput='')"
.br
.RI "\fITrain the optimal decision tree using cross-validation with the given number of folds\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Density Estimation Trees\&. 
.SH "Function Documentation"
.PP 
.SS "void mlpack::det::PrintLeafMembership (DTree *dtree, const arma::mat &data, const arma::Mat< size_t > &labels, const size_tnumClasses, const std::stringleafClassMembershipFile = \fC''\fP)"

.PP
Print the membership of leaves of a density estimation tree given the labels and number of classes\&. Optionally, pass the name of a file to print this information to (otherwise stdout is used)\&.
.PP
\fBParameters:\fP
.RS 4
\fIdtree\fP Tree to print membership of\&. 
.br
\fIdata\fP Dataset tree is built upon\&. 
.br
\fIlabels\fP Class labels of dataset\&. 
.br
\fInumClasses\fP Number of classes in dataset\&. 
.br
\fIleafClassMembershipFile\fP Name of file to print to (optional)\&. 
.RE
.PP

.SS "void mlpack::det::PrintVariableImportance (const DTree *dtree, const std::stringviFile = \fC''\fP)"

.PP
Print the variable importance of each dimension of a density estimation tree\&. Optionally, pass the name of a file to print this information to (otherwise stdout is used)\&.
.PP
\fBParameters:\fP
.RS 4
\fIdtree\fP Density tree to use\&. 
.br
\fIviFile\fP Name of file to print to (optional)\&. 
.RE
.PP

.SS "\fBDTree\fP* mlpack::det::Trainer (arma::mat &dataset, const size_tfolds, const booluseVolumeReg = \fCfalse\fP, const size_tmaxLeafSize = \fC10\fP, const size_tminLeafSize = \fC5\fP, const std::stringunprunedTreeOutput = \fC''\fP)"

.PP
Train the optimal decision tree using cross-validation with the given number of folds\&. Optionally, give a filename to print the unpruned tree to\&. This initializes a tree on the heap, so you are responsible for deleting it\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Dataset for the tree to use\&. 
.br
\fIfolds\fP Number of folds to use for cross-validation\&. 
.br
\fIuseVolumeReg\fP If true, use volume regularization\&. 
.br
\fImaxLeafSize\fP Maximum number of points allowed in a leaf\&. 
.br
\fIminLeafSize\fP Minimum number of points allowed in a leaf\&. 
.br
\fIunprunedTreeOutput\fP Filename to print unpruned tree to (optional)\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
