.TH "bug" 3 "Sat Mar 14 2015" "Version 1.0.12" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
bug \- Bug List 

.IP "\fBClass \fBmlpack::CLI\fP \fP" 1c
The \fBCOUNTER\fP variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros\&. However, not all compilers have this support--most notably, gcc < 4\&.3\&. In that case, the \fBLINE\fP macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages\&. See http://mlpack.org/trac/ticket/74 for more information\&.  
.IP "\fBMember \fBPARAM_DOUBLE\fP (ID, DESC, ALIAS, DEF)\fP" 1c
The \fBCOUNTER\fP variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros\&. However, not all compilers have this support--most notably, gcc < 4\&.3\&. In that case, the \fBLINE\fP macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages\&. See http://mlpack.org/trac/ticket/74 for more information\&.  
.IP "\fBMember \fBPARAM_DOUBLE_REQ\fP (ID, DESC, ALIAS)\fP" 1c
The \fBCOUNTER\fP variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros\&. However, not all compilers have this support--most notably, gcc < 4\&.3\&. In that case, the \fBLINE\fP macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages\&. See http://mlpack.org/trac/ticket/74 for more information\&.  
.IP "\fBMember \fBPARAM_FLAG\fP (ID, DESC, ALIAS)\fP" 1c
The \fBCOUNTER\fP variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros\&. However, not all compilers have this support--most notably, gcc < 4\&.3\&. In that case, the \fBLINE\fP macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages\&. See http://mlpack.org/trac/ticket/74 for more information\&.  
.IP "\fBMember \fBPARAM_FLOAT\fP (ID, DESC, ALIAS, DEF)\fP" 1c
The \fBCOUNTER\fP variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros\&. However, not all compilers have this support--most notably, gcc < 4\&.3\&. In that case, the \fBLINE\fP macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages\&. See http://mlpack.org/trac/ticket/74 for more information\&.  
.IP "\fBMember \fBPARAM_FLOAT_REQ\fP (ID, DESC, ALIAS)\fP" 1c
The \fBCOUNTER\fP variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros\&. However, not all compilers have this support--most notably, gcc < 4\&.3\&. In that case, the \fBLINE\fP macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages\&. See http://mlpack.org/trac/ticket/74 for more information\&.  
.IP "\fBMember \fBPARAM_INT\fP (ID, DESC, ALIAS, DEF)\fP" 1c
The \fBCOUNTER\fP variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros\&. However, not all compilers have this support--most notably, gcc < 4\&.3\&. In that case, the \fBLINE\fP macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages\&. See http://mlpack.org/trac/ticket/74 for more information\&.  
.IP "\fBMember \fBPARAM_INT_REQ\fP (ID, DESC, ALIAS)\fP" 1c
The \fBCOUNTER\fP variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros\&. However, not all compilers have this support--most notably, gcc < 4\&.3\&. In that case, the \fBLINE\fP macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages\&. See http://mlpack.org/trac/ticket/74 for more information\&.  
.IP "\fBMember \fBPARAM_STRING\fP (ID, DESC, ALIAS, DEF)\fP" 1c
The \fBCOUNTER\fP variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros\&. However, not all compilers have this support--most notably, gcc < 4\&.3\&. In that case, the \fBLINE\fP macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages\&. See http://mlpack.org/trac/ticket/74 for more information\&.  
.IP "\fBMember \fBPARAM_STRING_REQ\fP (ID, DESC, ALIAS)\fP" 1c
The \fBCOUNTER\fP variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros\&. However, not all compilers have this support--most notably, gcc < 4\&.3\&. In that case, the \fBLINE\fP macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages\&. See http://mlpack.org/trac/ticket/74 for more information\&.  
.IP "\fBMember \fBPARAM_VECTOR\fP (T, ID, DESC, ALIAS)\fP" 1c
The \fBCOUNTER\fP variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros\&. However, not all compilers have this support--most notably, gcc < 4\&.3\&. In that case, the \fBLINE\fP macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages\&. See http://mlpack.org/trac/ticket/74 for more information\&.  
.IP "\fBMember \fBPARAM_VECTOR_REQ\fP (T, ID, DESC, ALIAS)\fP" 1c
The \fBCOUNTER\fP variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros\&. However, not all compilers have this support--most notably, gcc < 4\&.3\&. In that case, the \fBLINE\fP macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages\&. See http://mlpack.org/trac/ticket/74 for more information\&. 
.PP

